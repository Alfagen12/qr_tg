// QR Scanner v3.3.1 - Universal Fixed version
console.log('üöÄ QR Scanner v3.3.1 Universal –∑–∞–≥—Ä—É–∂–µ–Ω!', new Date().toISOString());

class QRScanner {
    constructor() {
        this.video = document.getElementById('videoElement');
        this.canvas = document.getElementById('canvas');
        this.ctx = this.canvas.getContext('2d');
        this.stream = null;
        this.isScanning = false;
        this.cameras = [];
        this.currentCameraIndex = 0;
        this.scanInterval = null;
        
        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        this.useNativeAPI = false;
        this.useZXing = false;
        this.zxingReader = null;
        this.lastResult = null;
        
        // –î–µ—Ç–µ–∫—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        this.deviceInfo = this.detectDevice();
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.startBtn = document.getElementById('startScan');
        this.stopBtn = document.getElementById('stopScan');
        this.switchBtn = document.getElementById('switchCamera');
        this.checkPermissionsBtn = document.getElementById('checkPermissions');
        this.requestPermissionsBtn = document.getElementById('requestPermissions');
        this.resultDiv = document.getElementById('result');
        this.resultText = document.getElementById('resultText');
        this.statusDiv = document.getElementById('status');
        this.errorDiv = document.getElementById('error');
        this.sendToBotBtn = document.getElementById('sendToBot');
        
        this.initEventListeners();
        this.initTelegram();
        this.initializeScanner();
    }
    
    detectDevice() {
        const ua = navigator.userAgent;
        const device = {
            isIOS: /iPad|iPhone|iPod/.test(ua),
            isPOCO: /POCO|MIUI|Xiaomi/i.test(ua),
            isSamsung: /Samsung/i.test(ua),
            isRealme: /RMX|Realme/i.test(ua),
            isAndroid: /Android/i.test(ua),
            browser: this.detectBrowser(),
            version: this.getOSVersion()
        };
        
        console.log('üì± Device detected:', device);
        return device;
    }
    
    detectBrowser() {
        const ua = navigator.userAgent;
        if (ua.includes('Chrome')) return 'Chrome';
        if (ua.includes('Safari') && !ua.includes('Chrome')) return 'Safari';
        if (ua.includes('Firefox')) return 'Firefox';
        if (ua.includes('Edge')) return 'Edge';
        return 'Unknown';
    }
    
    getOSVersion() {
        const ua = navigator.userAgent;
        const match = ua.match(/(?:Android|iPhone OS|iPad OS)\s([\d_\.]+)/);
        return match ? match[1].replace(/_/g, '.') : 'Unknown';
    }
    
    async initializeScanner() {
        console.log('üîç Initializing universal QR scanner...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ç–∏–≤–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É BarcodeDetector
        if ('BarcodeDetector' in window) {
            console.log('‚úÖ Native BarcodeDetector available');
            this.useNativeAPI = true;
            await this.checkBarcodeDetectorSupport();
        } else {
            console.log('‚ö†Ô∏è BarcodeDetector not available, loading ZXing...');
            await this.loadZXing();
        }
        
        this.showDeviceInfo();
    }
    
    async loadZXing() {
        try {
            console.log('üì¶ Loading ZXing library...');
            
            // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç ZXing
            const script = document.createElement('script');
            script.src = 'https://unpkg.com/@zxing/library@latest/umd/index.min.js';
            document.head.appendChild(script);
            
            await new Promise((resolve, reject) => {
                script.onload = resolve;
                script.onerror = reject;
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ZXing reader
            this.zxingReader = new ZXing.BrowserQRCodeReader();
            this.useZXing = true;
            
            console.log('‚úÖ ZXing library loaded successfully');
            this.showStatus('üì± –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –≥–æ—Ç–æ–≤ (ZXing)');
            
        } catch (error) {
            console.error('‚ùå Failed to load ZXing:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
        }
    }
    
    showDeviceInfo() {
        const info = document.createElement('div');
        info.className = 'device-info';
        info.innerHTML = `
            <div style="background: #e3f2fd; border: 1px solid #90caf9; padding: 10px; margin: 10px; border-radius: 8px; font-size: 12px;">
                <strong>üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</strong> ${this.deviceInfo.isPOCO ? 'POCO/MIUI' : this.deviceInfo.isIOS ? 'iPhone/iPad' : this.deviceInfo.isSamsung ? 'Samsung' : this.deviceInfo.isRealme ? 'Realme' : 'Android'}<br>
                <strong>üåê –ë—Ä–∞—É–∑–µ—Ä:</strong> ${this.deviceInfo.browser}<br>
                <strong>üîç –°–∫–∞–Ω–µ—Ä:</strong> ${this.useNativeAPI ? 'Native BarcodeDetector' : 'ZXing Universal'}
            </div>
        `;
        document.body.insertBefore(info, document.body.firstChild);
    }
    
    initEventListeners() {
        this.startBtn.addEventListener('click', () => this.startScanning());
        this.stopBtn.addEventListener('click', () => this.stopScanning());
        this.switchBtn.addEventListener('click', () => this.switchCamera());
        this.checkPermissionsBtn.addEventListener('click', () => this.checkCameraPermissions());
        this.requestPermissionsBtn.addEventListener('click', () => this.requestCameraPermissions());
        this.sendToBotBtn.addEventListener('click', () => this.sendResultToBot());
    }
    
    initTelegram() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            tg.ready();
            tg.expand();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
            document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#ffffff');
            document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#000000');
            document.documentElement.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color || '#707579');
            document.documentElement.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#2481cc');
            document.documentElement.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#ffffff');
            document.documentElement.style.setProperty('--tg-theme-secondary-bg-color', tg.themeParams.secondary_bg_color || '#f1f1f1');
        }
    }
    
    async requestCameraPermissions() {
        try {
            this.showStatus('–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ...');
            
            // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ
            const stream = await navigator.mediaDevices.getUserMedia({ 
                video: { 
                    facingMode: 'environment',
                    width: 640,
                    height: 480
                } 
            });
            
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø, —Å—Ä–∞–∑—É –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
            stream.getTracks().forEach(track => track.stop());
            
            this.showStatus('‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.');
            this.hideError();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
            
            if (error.name === 'NotAllowedError') {
                this.showError('‚ùå –î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:\\n\\nüì± –ù–∞ –º–æ–±–∏–ª—å–Ω–æ–º: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ‚Üí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí –ö–∞–º–µ—Ä–∞ ‚Üí –†–∞–∑—Ä–µ—à–∏—Ç—å\\n\\nüíª –í –±—Ä–∞—É–∑–µ—Ä–µ: –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É üîí –∏–ª–∏ üì∑ —Ä—è–¥–æ–º —Å –∞–¥—Ä–µ—Å–æ–º —Å–∞–π—Ç–∞');
            } else {
                this.showError(`–û—à–∏–±–∫–∞: ${error.message}`);
            }
        }
    }
    
    async checkCameraPermissions() {
        try {
            this.showStatus('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∫–∞–º–µ—Ä—ã...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                this.showError('API –∫–∞–º–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û–±–Ω–æ–≤–∏—Ç–µ Telegram –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä.');
                return;
            }
            
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
            const devices = await navigator.mediaDevices.enumerateDevices();
            const cameras = devices.filter(device => device.kind === 'videoinput');
            
            if (cameras.length === 0) {
                this.showError('–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            
            this.showStatus(`üì∑ –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä: ${cameras.length}`);
            this.hideError();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
            this.showError(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–º–µ—Ä—ã: ${error.message}`);
        }
    }
    
    checkBarcodeDetectorSupport() {
        try {
            if ('BarcodeDetector' in window) {
                this.barcodeDetector = new BarcodeDetector({
                    formats: ['qr_code', 'ean_13', 'code_128', 'data_matrix']
                });
                this.showStatus('‚úÖ BarcodeDetector API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
                console.log('‚úÖ BarcodeDetector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            } else {
                this.showStatus('‚ö†Ô∏è BarcodeDetector –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ZXing');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BarcodeDetector:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫–∞–Ω–µ—Ä–∞');
        }
    }
    
    async getCameras() {
        try {
            const devices = await navigator.mediaDevices.enumerateDevices();
            this.cameras = devices.filter(device => device.kind === 'videoinput');
            console.log('üì∑ –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä:', this.cameras.length);
            
            if (this.cameras.length > 1) {
                this.switchBtn.style.display = 'inline-block';
            }
            
            return this.cameras;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä:', error);
            return [];
        }
    }
    
    async startScanning() {
        try {
            console.log('üì∑ Starting QR scanning...');
            this.showStatus('–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
            
            if (this.isScanning) {
                console.log('‚ö†Ô∏è Scanning already in progress');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä
            await this.getCameras();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            const constraints = this.deviceInfo.isPOCO ? {
                video: {
                    facingMode: 'environment',
                    width: { ideal: 640 },
                    height: { ideal: 480 },
                    frameRate: { ideal: 15, max: 30 }
                }
            } : {
                video: {
                    facingMode: 'environment',
                    width: { ideal: 1280 },
                    height: { ideal: 720 }
                }
            };
            
            console.log('üì∑ Camera constraints:', constraints);
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ
            this.stream = await navigator.mediaDevices.getUserMedia(constraints);
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫ –∫ –≤–∏–¥–µ–æ
            this.video.srcObject = this.stream;
            this.video.style.display = 'block';
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
            await new Promise((resolve) => {
                this.video.onloadedmetadata = () => {
                    this.video.play();
                    resolve();
                };
            });
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º canvas
            this.canvas.width = this.video.videoWidth;
            this.canvas.height = this.video.videoHeight;
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            this.isScanning = true;
            this.startBtn.style.display = 'none';
            this.stopBtn.style.display = 'inline-block';
            
            this.showStatus('üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –ù–∞–≤–µ–¥–∏—Ç–µ –Ω–∞ QR-–∫–æ–¥.');
            this.hideError();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
            this.startDetection();
            
        } catch (error) {
            console.error('‚ùå Error starting camera:', error);
            this.handleCameraError(error);
        }
    }
    
    handleCameraError(error) {
        let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ';
        let suggestions = [];
        
        if (error.name === 'NotAllowedError') {
            errorMessage = 'üö´ –î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω';
            suggestions = [
                '–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞',
                '–ù–∞ POCO: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Üí Telegram ‚Üí –†–∞–∑—Ä–µ—à–µ–Ω–∏—è ‚Üí –ö–∞–º–µ—Ä–∞',
                '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Telegram –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π'
            ];
        } else if (error.name === 'NotFoundError') {
            errorMessage = 'üì∑ –ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
            suggestions = [
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–∞–º–µ—Ä–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º',
                '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω'
            ];
        } else if (error.name === 'NotSupportedError') {
            errorMessage = '‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
            suggestions = [
                '–û–±–Ω–æ–≤–∏—Ç–µ Telegram –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏',
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤ Chrome –±—Ä–∞—É–∑–µ—Ä–µ'
            ];
        }
        
        this.showError(errorMessage + (suggestions.length ? '\\n\\n' + suggestions.join('\\n') : ''));
        this.isScanning = false;
        this.startBtn.style.display = 'inline-block';
        this.stopBtn.style.display = 'none';
    }
    
    stopScanning() {
        console.log('üõë Stopping QR scanning...');
        
        this.isScanning = false;
        
        if (this.scanInterval) {
            clearInterval(this.scanInterval);
            this.scanInterval = null;
        }
        
        if (this.stream) {
            this.stream.getTracks().forEach(track => track.stop());
            this.stream = null;
        }
        
        if (this.zxingReader) {
            try {
                this.zxingReader.reset();
            } catch (e) {
                console.log('ZXing reset error (ignored):', e);
            }
        }
        
        this.video.style.display = 'none';
        this.startBtn.style.display = 'inline-block';
        this.stopBtn.style.display = 'none';
        
        this.showStatus('üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
    
    async switchCamera() {
        if (this.cameras.length <= 1) return;
        
        this.currentCameraIndex = (this.currentCameraIndex + 1) % this.cameras.length;
        
        if (this.isScanning) {
            this.stopScanning();
            await new Promise(resolve => setTimeout(resolve, 500));
            this.startScanning();
        }
    }
    
    startDetection() {
        if (!this.isScanning) return;
        
        if (this.useNativeAPI && this.barcodeDetector) {
            this.startNativeDetection();
        } else if (this.useZXing) {
            this.startZXingDetection();
        } else {
            // Fallback - –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å ZXing
            this.loadZXing().then(() => {
                if (this.isScanning) {
                    this.startZXingDetection();
                }
            });
        }
    }
    
    startNativeDetection() {
        this.scanInterval = setInterval(async () => {
            if (!this.isScanning || this.video.videoWidth === 0) return;
            
            try {
                this.ctx.drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);
                const barcodes = await this.barcodeDetector.detect(this.canvas);
                
                if (barcodes.length > 0) {
                    const barcode = barcodes[0];
                    this.onBarcodeDetected({ rawValue: barcode.rawValue, format: barcode.format });
                }
            } catch (error) {
                console.error('‚ùå Native detection error:', error);
            }
        }, 100);
    }
    
    async startZXingDetection() {
        try {
            console.log('üîç Starting ZXing detection...');
            
            if (!this.zxingReader) {
                console.error('‚ùå ZXing reader not initialized');
                return;
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º ZXing –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            this.scanInterval = setInterval(async () => {
                if (!this.isScanning || this.video.videoWidth === 0) return;
                
                try {
                    this.ctx.drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);
                    const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
                    
                    const result = await this.zxingReader.decodeFromImageData(imageData);
                    if (result) {
                        this.onBarcodeDetected({ 
                            rawValue: result.getText(), 
                            format: result.getBarcodeFormat() 
                        });
                    }
                } catch (scanError) {
                    // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ—Ç QR-–∫–æ–¥–∞ –≤ –∫–∞–¥—Ä–µ)
                }
            }, 300); // –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 300–º—Å –¥–ª—è ZXing
            
        } catch (error) {
            console.error('‚ùå ZXing detection error:', error);
        }
    }
    
    onBarcodeDetected(barcode) {
        this.stopScanning();
        
        // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if (navigator.vibrate) {
            navigator.vibrate(200);
        }
        
        console.log('‚úÖ QR detected:', barcode.rawValue, 'Format:', barcode.format);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.showResult(barcode.rawValue, barcode.format || 'qr_code');
    }
    
    showResult(value, format) {
        this.lastResult = { value, format };
        this.resultText.textContent = value;
        this.resultDiv.style.display = 'block';
        
        console.log('üìã QR —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', value);
    }
    
    hideResult() {
        this.resultDiv.style.display = 'none';
    }
    
    sendResultToBot() {
        if (!this.lastResult) {
            this.showError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
            return;
        }
        
        const text = this.lastResult.value;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ–±–∞ —Å–ø–æ—Å–æ–±–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            try {
                tg.sendData(text);
                console.log('‚úÖ Sent via tg.sendData');
            } catch (error) {
                console.error('‚ùå Error with tg.sendData:', error);
            }
        }
        
        // –î—É–±–ª–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ webhook
        this.sendToN8NWebhook(text, 'qr_code');
        
        this.showStatus(`üí∞ –ü–ª–∞—Ç–µ–∂ "${text}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω!`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        if (window.Telegram && window.Telegram.WebApp) {
            setTimeout(() => {
                window.Telegram.WebApp.close();
            }, 2000);
        }
    }
    
    showStatus(message) {
        this.statusDiv.textContent = message;
        this.statusDiv.style.display = 'block';
    }
    
    showError(message) {
        this.errorDiv.innerHTML = message.replace(/\\n/g, '<br>');
        this.errorDiv.style.display = 'block';
    }
    
    hideError() {
        this.errorDiv.style.display = 'none';
    }
    
    async sendToN8NWebhook(qrText, format) {
        const webhookUrl = 'https://codanetn8n.ru/webhook/04a25c25-4aa8-4688-b395-a1681641552b';
        
        const data = {
            qr_text: qrText,
            format: format,
            timestamp: new Date().toISOString(),
            user_id: window.Telegram?.WebApp?.initDataUnsafe?.user?.id || null,
            username: window.Telegram?.WebApp?.initDataUnsafe?.user?.username || null,
            first_name: window.Telegram?.WebApp?.initDataUnsafe?.user?.first_name || null
        };
        
        try {
            console.log('üì§ Sending to n8n webhook:', data);
            console.log('üì° Webhook URL:', webhookUrl);
            
            const response = await fetch(webhookUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            
            console.log('üîÑ Response status:', response.status);
            
            const responseText = await response.text();
            console.log('üì® Response body:', responseText);
            
            if (response.ok) {
                console.log('‚úÖ Data sent to n8n webhook successfully');
                return true;
            } else {
                console.error('‚ùå n8n webhook responded with:', response.status, response.statusText);
            }
        } catch (error) {
            console.error('‚ùå Error sending to n8n webhook:', error);
        }
        return false;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Initializing QR Scanner...');
    window.qrScanner = new QRScanner();
});
