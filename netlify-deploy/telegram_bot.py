"""
Telegram –±–æ—Ç –¥–ª—è QR Scanner Web App
–¢—Ä–µ–±—É–µ—Ç: pip install python-telegram-bot
"""

import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

# URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
WEB_APP_URL = "https://your-domain.com"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º Web App –∫–Ω–æ–ø–∫—É
    web_app = WebAppInfo(url=WEB_APP_URL)
    keyboard = [
        [InlineKeyboardButton("üì∑ –û—Ç–∫—Ä—ã—Ç—å QR Scanner", web_app=web_app)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–≠—Ç–æ QR Scanner –±–æ—Ç. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–∫–∞–Ω–µ—Ä:\n\n"
        "üîπ –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥—ã –∏ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã\n"
        "üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤\n"
        "üîπ –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ\n"
        "üîπ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    )
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ *QR Scanner Bot - –ü–æ–º–æ—â—å*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–∫–∞–Ω–µ—Ä\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/scan - –û—Ç–∫—Ä—ã—Ç—å QR —Å–∫–∞–Ω–µ—Ä\n\n"
        "üì± *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å QR Scanner'\n"
        "2. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ\n"
        "3. –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥\n"
        "4. –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ —á–∞—Ç\n\n"
        "üîß *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*\n"
        "‚Ä¢ QR Code\n"
        "‚Ä¢ EAN-13, EAN-8\n"
        "‚Ä¢ Code 128, Code 39\n"
        "‚Ä¢ UPC-A, UPC-E\n"
        "‚Ä¢ –ò –¥—Ä—É–≥–∏–µ\n\n"
        "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
        "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Chrome –∏–ª–∏ Edge"
    )
    
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown'
    )

async def scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan"""
    web_app = WebAppInfo(url=WEB_APP_URL)
    keyboard = [
        [InlineKeyboardButton("üì∑ –û—Ç–∫—Ä—ã—Ç—å QR Scanner", web_app=web_app)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üì∑ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ QR —Å–∫–∞–Ω–µ—Ä–∞:",
        reply_markup=reply_markup
    )

async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        data = json.loads(update.effective_message.web_app_data.data)
        user = update.effective_user
        
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç {user.first_name}: {data}")
        
        if data.get('action') == 'qr_scanned':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ QR-–∫–æ–¥–∞
            value = data.get('value', '')
            format_type = data.get('format', 'Unknown')
            timestamp = data.get('timestamp', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            content_type = detect_content_type(value)
            
            response_message = (
                f"‚úÖ *QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω!*\n\n"
                f"üìÑ *–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:*\n`{value}`\n\n"
                f"üè∑Ô∏è *–§–æ—Ä–º–∞—Ç:* {format_type}\n"
                f"üìÇ *–¢–∏–ø:* {content_type}\n"
                f"üïê *–í—Ä–µ–º—è:* {format_timestamp(timestamp)}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = []
            
            if content_type == "URL":
                keyboard.append([InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", url=value)])
            elif content_type == "Email":
                keyboard.append([InlineKeyboardButton("üìß –ù–∞–ø–∏—Å–∞—Ç—å email", url=f"mailto:{value}")])
            elif content_type == "Phone":
                keyboard.append([InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url=f"tel:{value}")])
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            web_app = WebAppInfo(url=WEB_APP_URL)
            keyboard.append([InlineKeyboardButton("üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", web_app=web_app)])
            
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            
            await update.effective_message.reply_text(
                response_message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        elif data.get('action') == 'send_result':
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await update.effective_message.reply_text(
                "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ QR Scanner."
            )
            
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–∞–Ω–Ω—ã—Ö")
        await update.effective_message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Web App –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

def detect_content_type(content: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ QR-–∫–æ–¥–∞"""
    content = content.lower().strip()
    
    if content.startswith(('http://', 'https://', 'www.')):
        return "URL"
    elif '@' in content and '.' in content:
        return "Email"
    elif content.startswith(('tel:', '+')) or content.replace('+', '').replace('-', '').replace(' ', '').isdigit():
        return "Phone"
    elif content.startswith('wifi:'):
        return "WiFi"
    elif content.startswith('geo:'):
        return "Location"
    elif content.startswith('smsto:'):
        return "SMS"
    elif content.startswith('mailto:'):
        return "Email"
    elif len(content) == 13 and content.isdigit():
        return "EAN-13"
    elif len(content) == 8 and content.isdigit():
        return "EAN-8"
    elif content.isdigit():
        return "Number"
    else:
        return "Text"

def format_timestamp(timestamp):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    try:
        import datetime
        dt = datetime.datetime.fromtimestamp(int(timestamp) / 1000)
        return dt.strftime("%H:%M:%S")
    except:
        return "Unknown"

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"Update {update} caused error {context.error}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ –∫–æ–¥–µ!")
        return
    
    if WEB_APP_URL == "https://your-domain.com":
        print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π WEB_APP_URL!")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("scan", scan_command))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
