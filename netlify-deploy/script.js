// QR Scanner v2.1.0 - Build: 2025-01-28T18:31:00Z
console.log('üöÄ QR Scanner v2.1.0 –∑–∞–≥—Ä—É–∂–µ–Ω!', new Date().toISOString());

class QRScanner {
    constructor() {
        this.video = document.getElementById('videoElement');
        this.canvas = document.getElementById('canvas');
        this.ctx = this.canvas.getContext('2d');
        this.stream = null;
        this.isScanning = false;
        this.cameras = [];
        this.currentCameraIndex = 0;
        this.scanInterval = null;
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.startBtn = document.getElementById('startScan');
        this.stopBtn = document.getElementById('stopScan');
        this.switchBtn = document.getElementById('switchCamera');
        this.checkPermissionsBtn = document.getElementById('checkPermissions');
        this.requestPermissionsBtn = document.getElementById('requestPermissions');
        this.resultDiv = document.getElementById('result');
        this.resultText = document.getElementById('resultText');
        this.statusDiv = document.getElementById('status');
        this.errorDiv = document.getElementById('error');
        this.copyBtn = document.getElementById('copyResult');
        this.shareBtn = document.getElementById('shareResult');
        this.sendToBotBtn = document.getElementById('sendToBot');
        
        this.initEventListeners();
        this.initTelegram();
        this.checkBarcodeDetectorSupport();
    }
    
    initEventListeners() {
        this.startBtn.addEventListener('click', () => this.startScanning());
        this.stopBtn.addEventListener('click', () => this.stopScanning());
        this.switchBtn.addEventListener('click', () => this.switchCamera());
        this.checkPermissionsBtn.addEventListener('click', () => this.checkCameraPermissions());
        this.requestPermissionsBtn.addEventListener('click', () => this.requestCameraPermissions());
        this.copyBtn.addEventListener('click', () => this.copyResult());
        this.shareBtn.addEventListener('click', () => this.shareResult());
        this.sendToBotBtn.addEventListener('click', () => this.sendResultToBot());
    }
    
    initTelegram() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            tg.ready();
            tg.expand();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
            document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#ffffff');
            document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#000000');
            document.documentElement.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color || '#707579');
            document.documentElement.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#2481cc');
            document.documentElement.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#ffffff');
            document.documentElement.style.setProperty('--tg-theme-secondary-bg-color', tg.themeParams.secondary_bg_color || '#f1f1f1');
        }
    }
    
    async requestCameraPermissions() {
        try {
            this.showStatus('–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ...');
            
            // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ
            const stream = await navigator.mediaDevices.getUserMedia({ 
                video: { 
                    facingMode: 'environment',
                    width: 640,
                    height: 480
                } 
            });
            
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø, —Å—Ä–∞–∑—É –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
            stream.getTracks().forEach(track => track.stop());
            
            this.showStatus('‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.');
            this.hideError();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
            
            if (error.name === 'NotAllowedError') {
                this.showError('‚ùå –î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:\n\nüì± –ù–∞ –º–æ–±–∏–ª—å–Ω–æ–º: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ‚Üí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí –ö–∞–º–µ—Ä–∞ ‚Üí –†–∞–∑—Ä–µ—à–∏—Ç—å\n\nüíª –í –±—Ä–∞—É–∑–µ—Ä–µ: –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É üîí –∏–ª–∏ üì∑ —Ä—è–¥–æ–º —Å –∞–¥—Ä–µ—Å–æ–º —Å–∞–π—Ç–∞');
            } else {
                this.showError(`–û—à–∏–±–∫–∞: ${error.message}`);
            }
        }
    }
    
    async checkCameraPermissions() {
        try {
            this.showStatus('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∫–∞–º–µ—Ä—ã...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                this.showError('API –∫–∞–º–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û–±–Ω–æ–≤–∏—Ç–µ Telegram –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä.');
                return;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
            const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
            const isAndroid = /Android/.test(navigator.userAgent);
            
            this.showStatus(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${isMobile ? '–ú–æ–±–∏–ª—å–Ω–æ–µ' : '–î–µ—Å–∫—Ç–æ–ø'} ${isIOS ? '(iOS)' : isAndroid ? '(Android)' : ''}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–Ω–µ –≤—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç)
            if (navigator.permissions && !isIOS) {
                try {
                    const permission = await navigator.permissions.query({ name: 'camera' });
                    this.showStatus(`–°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã: ${permission.state}`);
                    
                    if (permission.state === 'denied') {
                        if (isMobile) {
                            this.showError('–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ‚Üí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Üí –ö–∞–º–µ—Ä–∞ ‚Üí –†–∞–∑—Ä–µ—à–∏—Ç—å.');
                        } else {
                            this.showError('–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω. –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –∫–∞–º–µ—Ä—ã –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.');
                        }
                        return;
                    }
                } catch (permError) {
                    console.log('Permissions API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', permError);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–º–µ—Ä—ã
            const devices = await navigator.mediaDevices.enumerateDevices();
            const cameras = devices.filter(device => device.kind === 'videoinput');
            
            if (cameras.length === 0) {
                this.showError('–ö–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–º–µ—Ä–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
            if (window.Telegram && window.Telegram.WebApp) {
                const tg = window.Telegram.WebApp;
                this.showStatus(`‚úÖ Telegram WebApp –∞–∫—Ç–∏–≤–µ–Ω. –í–µ—Ä—Å–∏—è: ${tg.version || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
                
                if (tg.platform === 'ios' || tg.platform === 'android') {
                    this.showStatus(`–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${tg.platform}. –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä: ${cameras.length}`);
                }
            }
            
            this.showStatus(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä: ${cameras.length}. –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ. ${isMobile ? '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –∫–∞–º–µ—Ä—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram!' : '–ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!'}`);
            this.hideError();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
            this.showError(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å Telegram –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`);
        }
    }
    
    checkBarcodeDetectorSupport() {
        if (!('BarcodeDetector' in window)) {
            this.showError('BarcodeDetector API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Chrome –∏–ª–∏ Edge.');
            this.startBtn.disabled = true;
            return false;
        }
        return true;
    }
    
    async getCameras() {
        try {
            const devices = await navigator.mediaDevices.enumerateDevices();
            this.cameras = devices.filter(device => device.kind === 'videoinput');
            
            if (this.cameras.length > 1) {
                this.switchBtn.disabled = false;
            }
            
            return this.cameras.length > 0;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä:', error);
            return false;
        }
    }
    
    async startScanning() {
        if (!this.checkBarcodeDetectorSupport()) return;
        
        try {
            this.showStatus('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã...');
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä
            const hasCameras = await this.getCameras();
            if (!hasCameras) {
                this.showError('–ö–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            let constraints;
            if (isMobile) {
                // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                constraints = {
                    video: {
                        facingMode: { ideal: 'environment' }, // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∑–∞–¥–Ω—é—é –∫–∞–º–µ—Ä—É
                        width: { ideal: 640 },
                        height: { ideal: 480 }
                    }
                };
            } else {
                // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                constraints = {
                    video: {
                        facingMode: 'environment',
                        width: { ideal: 640, max: 1280 },
                        height: { ideal: 480, max: 720 }
                    }
                };
            }
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ
            try {
                this.stream = await navigator.mediaDevices.getUserMedia(constraints);
            } catch (error) {
                console.log('–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:', error);
                
                if (isMobile) {
                    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö: –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–¥–Ω—é—é –∫–∞–º–µ—Ä—É
                    try {
                        constraints.video.facingMode = { ideal: 'user' };
                        this.stream = await navigator.mediaDevices.getUserMedia(constraints);
                    } catch (error2) {
                        // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ª—é–±–∞—è –∫–∞–º–µ—Ä–∞
                        constraints = { video: { width: 640, height: 480 } };
                        this.stream = await navigator.mediaDevices.getUserMedia(constraints);
                    }
                } else {
                    // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞: —É–ø—Ä–æ—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    constraints = { video: true };
                    this.stream = await navigator.mediaDevices.getUserMedia(constraints);
                }
            }
            
            this.video.srcObject = this.stream;
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
            await new Promise((resolve, reject) => {
                this.video.onloadedmetadata = () => {
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–¥–µ–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
                    this.video.play().then(resolve).catch(reject);
                };
                this.video.onerror = reject;
                
                // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º
                setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ')), 10000);
            });
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º canvas
            this.canvas.width = this.video.videoWidth || 640;
            this.canvas.height = this.video.videoHeight || 480;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º BarcodeDetector
            this.barcodeDetector = new BarcodeDetector({
                formats: ['qr_code', 'ean_13', 'ean_8', 'code_128', 'code_39', 'code_93', 'codabar', 'itf', 'upc_a', 'upc_e']
            });
            
            this.isScanning = true;
            this.startBtn.disabled = true;
            this.stopBtn.disabled = false;
            this.switchBtn.disabled = this.cameras.length <= 1;
            
            this.showStatus('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥.');
            this.hideError();
            this.hideResult();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
            document.querySelector('.scan-frame').classList.add('scanning');
            
            // –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            this.startDetection();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã:', error);
            let errorMessage = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ';
            
            if (error.name === 'NotAllowedError') {
                errorMessage = '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω. –í Telegram: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí –ö–∞–º–µ—Ä–∞ ‚Üí –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–ª—è Telegram.';
            } else if (error.name === 'NotFoundError') {
                errorMessage = '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–º–µ–µ—Ç –∫–∞–º–µ—Ä—É.';
            } else if (error.name === 'NotReadableError') {
                errorMessage = '–ö–∞–º–µ—Ä–∞ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–∞–º–µ—Ä–æ–π –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
            } else if (error.name === 'OverconstrainedError') {
                errorMessage = '–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram.';
            } else if (error.name === 'NotSupportedError') {
                errorMessage = '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Telegram. –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.';
            } else if (error.message.includes('–¢–∞–π–º–∞—É—Ç')) {
                errorMessage = '–ö–∞–º–µ—Ä–∞ –¥–æ–ª–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Telegram.';
            } else {
                errorMessage = `–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã: ${error.message}`;
            }
            
            this.showError(errorMessage);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            if (/Android|iPhone|iPad|iPod/i.test(navigator.userAgent)) {
                this.showStatus('üì± –°–æ–≤–µ—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ: 1) –†–∞–∑—Ä–µ—à–∏—Ç–µ –∫–∞–º–µ—Ä—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram 2) –û–±–Ω–æ–≤–∏—Ç–µ Telegram –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ 3) –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 4) –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"');
            } else {
                this.showStatus('üí° –°–æ–≤–µ—Ç—ã: 1) –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ 2) –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS 3) –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Chrome/Edge 4) –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–∞–º–µ—Ä–æ–π');
            }
        }
    }
    
    stopScanning() {
        this.isScanning = false;
        
        if (this.scanInterval) {
            clearInterval(this.scanInterval);
            this.scanInterval = null;
        }
        
        if (this.stream) {
            this.stream.getTracks().forEach(track => track.stop());
            this.stream = null;
        }
        
        this.video.srcObject = null;
        
        this.startBtn.disabled = false;
        this.stopBtn.disabled = true;
        this.switchBtn.disabled = true;
        
        document.querySelector('.scan-frame').classList.remove('scanning');
        
        this.showStatus('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
    
    async switchCamera() {
        if (this.cameras.length <= 1) return;
        
        this.currentCameraIndex = (this.currentCameraIndex + 1) % this.cameras.length;
        
        if (this.isScanning) {
            this.stopScanning();
            await new Promise(resolve => setTimeout(resolve, 100));
            this.startScanning();
        }
    }
    
    startDetection() {
        if (!this.isScanning) return;
        
        this.scanInterval = setInterval(async () => {
            if (!this.isScanning || this.video.videoWidth === 0) return;
            
            try {
                // –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ –≤ canvas
                this.ctx.drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);
                
                // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥—ã
                const barcodes = await this.barcodeDetector.detect(this.canvas);
                
                if (barcodes.length > 0) {
                    const barcode = barcodes[0];
                    this.onBarcodeDetected(barcode);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏:', error);
            }
        }, 100); // –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å
    }
    
    onBarcodeDetected(barcode) {
        this.stopScanning();
        
        // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if (navigator.vibrate) {
            navigator.vibrate(200);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.showResult(barcode.rawValue, barcode.format);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram –¥–ª—è n8n
        this.sendToTelegramN8N(barcode.rawValue, barcode.format);
    }
    
    showResult(value, format) {
        this.resultText.textContent = value;
        this.resultDiv.style.display = 'block';
        // –£–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    }
    
    hideResult() {
        this.resultDiv.style.display = 'none';
    }

    sendResultToBot() {
        const text = this.resultText.textContent;
        if (text) {
            console.log('üì§ sendResultToBot called with text:', text);
            
            if (window.Telegram && window.Telegram.WebApp) {
                const tg = window.Telegram.WebApp;
                
                // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                const message = `QR-–∫–æ–¥: ${text}`;
                
                try {
                    // –°–ø–æ—Å–æ–± 1: sendData (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
                    tg.sendData(text);
                    console.log('‚úÖ Data sent via sendData');
                    
                    // –°–ø–æ—Å–æ–± 2: –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                    navigator.clipboard.writeText(text).then(() => {
                        this.showStatus(`‚úÖ –¢–µ–∫—Å—Ç "${text}" —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! –¢–µ–ø–µ—Ä—å:\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º\n2. –í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç (Ctrl+V)\n3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`);
                    }).catch(() => {
                        this.showStatus(`üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±–æ—Ç—É: ${text}`);
                    });
                    
                    // –°–ø–æ—Å–æ–± 3: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç (–û–¢–ö–õ–Æ–ß–ï–ù–û - –≤—ã–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è)
                    // setTimeout(() => {
                    //     const telegramUrl = `tg://msg?text=${encodeURIComponent(message)}`;
                    //     window.open(telegramUrl, '_blank');
                    //     console.log('üì± Attempted to open Telegram with message');
                    // }, 500);
                    
                } catch (error) {
                    console.error('‚ùå Error in sendResultToBot:', error);
                    
                    // Fallback - –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                    navigator.clipboard.writeText(text).then(() => {
                        this.showStatus(`ÔøΩ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä: "${text}". –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º.`);
                    }).catch(() => {
                        this.showStatus(`‚ùå –û—à–∏–±–∫–∞. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é: ${text}`);
                    });
                }
            } else {
                // –í–Ω–µ Telegram - –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º
                navigator.clipboard.writeText(text).then(() => {
                    this.showStatus(`üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: "${text}"`);
                }).catch(() => {
                    this.showStatus(`üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç: ${text}`);
                });
            }
        } else {
            this.showStatus('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
        }
    }
    
    sendToTelegramN8N(value, format) {
        console.log('üöÄ sendToTelegramN8N called with:', { value, format });
        
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            console.log('üì± Telegram WebApp available');
            
            // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ø–æ—Å–æ–± - –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
            tg.MainButton.setText('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç');
            tg.MainButton.color = '#2481cc';
            tg.MainButton.textColor = '#ffffff';
            tg.MainButton.show();
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            tg.MainButton.offClick();
            
            // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            tg.MainButton.onClick(() => {
                console.log('üéØ MainButton clicked, sending message to chat');
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ —á–∞—Ç —á–µ—Ä–µ–∑ Telegram API
                const message = `QR-–∫–æ–¥: ${value}`;
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram —Å—Ö–µ–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                const telegramUrl = `tg://msg?text=${encodeURIComponent(message)}`;
                
                try {
                    // –ü–æ–ø—ã—Ç–∫–∞ 1: —á–µ—Ä–µ–∑ sendData
                    tg.sendData(value);
                    console.log('üì§ Sent via sendData:', value);
                    
                    // –ü–æ–ø—ã—Ç–∫–∞ 2: –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    window.open(telegramUrl, '_blank');
                    console.log('ÔøΩ Opened Telegram message dialog');
                    
                    this.showStatus(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ "${value}" –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!`);
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    tg.MainButton.hide();
                    setTimeout(() => {
                        tg.close();
                    }, 2000);
                    
                } catch (error) {
                    console.error('‚ùå Error:', error);
                    
                    // Fallback - –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                    navigator.clipboard.writeText(value).then(() => {
                        this.showStatus(`üìã –¢–µ–∫—Å—Ç "${value}" —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞. –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º.`);
                    }).catch(() => {
                        this.showStatus(`üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±–æ—Ç—É: ${value}`);
                    });
                }
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            this.showStatus(`‚úÖ QR-–∫–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω! –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç—É.`);
            
        } else {
            console.log('‚ùå Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. QR —Ç–µ–∫—Å—Ç:', value);
            this.showStatus('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω–µ Telegram. –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ' + value);
        }
    }

    sendToTelegram(value, format) {
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É
            tg.sendData(JSON.stringify({
                action: 'qr_scanned',
                value: value,
                format: format,
                timestamp: Date.now()
            }));
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫—Ä—ã—Ç—å"
            tg.MainButton.setText('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
            tg.MainButton.show();
            tg.MainButton.onClick(() => {
                tg.sendData(JSON.stringify({
                    action: 'send_result',
                    value: value,
                    format: format
                }));
                tg.close();
            });
        }
    }
    
    showStatus(message) {
        this.statusDiv.textContent = message;
        this.statusDiv.style.display = 'block';
    }
    
    showError(message) {
        this.errorDiv.textContent = message;
        this.errorDiv.style.display = 'block';
    }
    
    hideError() {
        this.errorDiv.style.display = 'none';
    }
    
    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ n8n webhook
    async sendToN8NWebhook(qrText, format) {
        // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL webhook –≤ n8n
        const webhookUrl = 'https://codanetn8n.ru/webhook/04a25c25-4aa8-4688-b395-a1681641552b';
        
        const data = {
            qr_text: qrText,
            format: format,
            timestamp: new Date().toISOString(),
            user_id: window.Telegram?.WebApp?.initDataUnsafe?.user?.id || null,
            username: window.Telegram?.WebApp?.initDataUnsafe?.user?.username || null,
            first_name: window.Telegram?.WebApp?.initDataUnsafe?.user?.first_name || null
        };
        
        try {
            console.log('üì§ Sending to n8n webhook:', data);
            
            const response = await fetch(webhookUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            
            if (response.ok) {
                console.log('‚úÖ Data sent to n8n webhook successfully');
                return true;
            } else {
                console.error('‚ùå n8n webhook responded with:', response.status, response.statusText);
            }
        } catch (error) {
            console.error('‚ùå Error sending to n8n webhook:', error);
        }
        return false;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new QRScanner();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.addEventListener('beforeunload', () => {
    if (window.qrScanner && window.qrScanner.isScanning) {
        window.qrScanner.stopScanning();
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.QRScanner = QRScanner;
